import os
import logging
import asyncio
import requests
import google.generativeai as genai
from openai import OpenAI
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_KEY = os.getenv("OPENROUTER_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
COLLEGE_NAME = os.getenv("COLLEGE_NAME", "–ö–∞—Ä–∞–≥–∞–Ω–¥–∏–Ω—Å–∫–∏–π –∫–æ–ª–ª–µ–¥–∂ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —Å–µ—Ä–≤–∏—Å–∞")
SCHEDULE_URL = os.getenv("SCHEDULE_URL")
SITE_URL = os.getenv("SITE_URL")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ---
COLLEGE_RULES = (
    "–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ö–∞—Ä–∞–≥–∞–Ω–¥–∏–Ω—Å–∫–æ–≥–æ –∫–æ–ª–ª–µ–¥–∂–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —Å–µ—Ä–≤–∏—Å–∞ (–ö–ö–¢–∏–°). "
    "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–ª–ª–µ–¥–∂–µ–º, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º, –ø—Ä–∏—ë–º–æ–º, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, "
    "—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º–∏, –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∏ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π –∂–∏–∑–Ω—å—é. "
    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –∫–∞—Å–∞–µ—Ç—Å—è –∫–æ–ª–ª–µ–¥–∂–∞ –∏–ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ‚Äî –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Å—å –æ—Ç–≤–µ—á–∞—Ç—å, "
    "–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–ª–ª–µ–¥–∂–µ–º –ö–ö–¢–∏–°.¬ª "
    "–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∫—Ä–∞—Ç–∫–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ."
)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
def get_main_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton(text="üéì –ü—Ä–∏—ë–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è")],
            [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")],
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª..."
    )

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback ---
async def generate_reply(prompt: str) -> str:
    # 1Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ ‚Äî OpenRouter
    try:
        logger.info("üß† –ü–æ–ø—ã—Ç–∫–∞: OpenRouter (deepseek-chat-v3-0324:free)")

        headers = {
            "Authorization": f"Bearer {OPENROUTER_KEY}",
            "Content-Type": "application/json",
            "X-Title": "KKTiS College Bot"
        }

        data = {
            "model": "deepseek/deepseek-chat-v3-0324:free",
            "messages": [
                {"role": "system", "content": COLLEGE_RULES},
                {"role": "user", "content": prompt},
            ],
        }

        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=data,
            timeout=60
        )

        print("STATUS:", response.status_code)
        print("BODY:", response.text)

        if response.status_code == 200:
            rj = response.json()
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OpenRouter (deepseek-chat)")
            return rj["choices"][0]["message"]["content"].strip()
        else:
            raise Exception(response.text)

    except Exception as e1:
        logger.warning(f"‚ö†Ô∏è OpenRouter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e1}")

    # 2Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ ‚Äî OpenAI
    try:
        if OPENAI_API_KEY:
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ OpenAI (gpt-4o-mini)...")
            client = OpenAI(api_key=OPENAI_API_KEY)
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": COLLEGE_RULES},
                    {"role": "user", "content": prompt}
                ],
            )
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OpenAI (gpt-4o-mini)")
            return response.choices[0].message.content.strip()
    except Exception as e2:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenAI: {e2}")

    # 3Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ ‚Äî Gemini
    try:
        if GEMINI_API_KEY:
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ Gemini (1.5-flash)...")
            genai.configure(api_key=GEMINI_API_KEY)
            model = genai.GenerativeModel("gemini-1.5-flash")
            reply = model.generate_content(f"{COLLEGE_RULES}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {prompt}")
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Gemini (1.5-flash)")
            return reply.text.strip()
    except Exception as e3:
        logger.error(f"‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e3}")

    # 4Ô∏è‚É£ –ù–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
    return "üòî –í—Å–µ –º–æ–¥–µ–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(CommandStart())
async def cmd_start(message: Message):
    welcome_text = (
        f"üéì <b>{COLLEGE_NAME}</b>\n\n"
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{message.from_user.first_name}</b>!\n\n"
        f"–Ø ‚Äî –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –∫–æ–ª–ª–µ–¥–∂–∞. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá"
    )
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

# --- –ö–Ω–æ–ø–∫–∏ ---
@dp.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: Message):
    await message.answer(
        f"üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:</b>\n\nüîó <a href='{SCHEDULE_URL}'>–û—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</a>\n\nüåê {SITE_URL}",
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )

@dp.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def show_contacts(message: Message):
    await message.answer(
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n–ö–∞—Ä–∞–≥–∞–Ω–¥–∞, —É–ª. –ó–∞—Ç–∞–µ–≤–∏—á–∞, 75\n‚òéÔ∏è 8-7212-37-58-44\n‚úâÔ∏è krg-koll-7092@bilim09.kzu.kz",
        parse_mode=ParseMode.HTML
    )

@dp.message(F.text == "üéì –ü—Ä–∏—ë–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è")
async def show_admission(message: Message):
    await message.answer(
        "üéì <b>–ü—Ä–∏—ë–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è</b>\n\n–°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ –∫–æ–ª–ª–µ–¥–∂–∞.",
        parse_mode=ParseMode.HTML
    )

# --- –ß–∞—Ç-—Ä–µ–∂–∏–º ---
@dp.message()
async def chat(message: Message):
    prompt = message.text
    reply = await generate_reply(prompt)
    await message.answer(reply)

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
async def main():
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (OpenRouter + —Ä–µ–∑–µ—Ä–≤ OpenAI/Gemini)")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
