import os
import logging
import asyncio
import requests
import google.generativeai as genai
from openai import OpenAI
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties

# üîß --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BOT_TOKEN = "8407576281:AAF0lofeJQxBxsxEoYrMimB4ACAtVVyHN9w"
OPENAI_API_KEY = "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"
GEMINI_API_KEY = "AIzaSyBSeT4fCI0wphjsujGkfFJ9VkexhUiKveE"
OPENROUTER_KEY = "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"

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞ ---
client = OpenAI(api_key=OPENAI_API_KEY)

# --- –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø –ò–ò ---
COLLEGE_RULES = (
    "–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ö–∞—Ä–∞–≥–∞–Ω–¥–∏–Ω—Å–∫–æ–≥–æ –∫–æ–ª–ª–µ–¥–∂–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —Å–µ—Ä–≤–∏—Å–∞ (–ö–ö–¢–∏–°). "
    "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–ª–ª–µ–¥–∂–µ–º, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º, –ø—Ä–∏—ë–º–æ–º, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, "
    "—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º–∏, –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∏ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π –∂–∏–∑–Ω—å—é. "
    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –∫–∞—Å–∞–µ—Ç—Å—è –∫–æ–ª–ª–µ–¥–∂–∞ –∏–ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ‚Äî –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Å—å –æ—Ç–≤–µ—á–∞—Ç—å, "
    "–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–ª–ª–µ–¥–∂–µ–º –ö–ö–¢–∏–°.¬ª "
    "–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∫—Ä–∞—Ç–∫–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ."
)


async def generate_reply(prompt: str) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞.
    –ü—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenAI ‚Üí Gemini ‚Üí OpenRouter.
    –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–º–∞—Ç–∏–∫–æ–π –ö–ö–¢–∏–°.
    """
    try:
        logger.info("üß† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OpenAI (GPT-4o-mini)")
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": COLLEGE_RULES},
                {"role": "user", "content": prompt}
            ],
        )
        return response.choices[0].message.content.strip()

    except Exception as e:
        err = str(e)
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenAI: {err}")

        if "insufficient_quota" in err or "429" in err:
            # –ü—Ä–æ–±—É–µ–º Gemini
            try:
                logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ Gemini...")
                genai.configure(api_key=GEMINI_API_KEY)
                model = genai.GenerativeModel("gemini-1.5-flash")
                reply = model.generate_content(f"{COLLEGE_RULES}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {prompt}")
                return reply.text.strip()
            except Exception as e2:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Gemini: {e2}")

                # –ü—Ä–æ–±—É–µ–º OpenRouter
                try:
                    logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ OpenRouter...")
                    headers = {
                        "Authorization": f"Bearer {OPENROUTER_KEY}",
                        "Content-Type": "application/json",
                    }
                    data = {
                        "model": "gpt-4o-mini",
                        "messages": [
                            {"role": "system", "content": COLLEGE_RULES},
                            {"role": "user", "content": prompt}
                        ],
                    }
                    resp = requests.post(
                        "https://openrouter.ai/api/v1/chat/completions",
                        headers=headers,
                        json=data,
                        timeout=60
                    )
                    rj = resp.json()
                    return rj["choices"][0]["message"]["content"].strip()
                except Exception as e3:
                    logger.error(f"‚ùå –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e3}")
                    return "üòî –í—Å–µ –º–æ–¥–µ–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        else:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {err}"


@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ö–∞—Ä–∞–≥–∞–Ω–¥–∏–Ω—Å–∫–æ–≥–æ –∫–æ–ª–ª–µ–¥–∂–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —Å–µ—Ä–≤–∏—Å–∞ (–ö–ö–¢–∏–°). "
        "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π –∂–∏–∑–Ω–∏."
    )


@dp.message()
async def chat(message: Message):
    prompt = message.text
    reply = await generate_reply(prompt)
    await message.answer(reply)


async def main():
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –¢–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ –ö–ö–¢–∏–°.")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

